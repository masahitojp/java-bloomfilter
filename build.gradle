apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'

    repositories.jcenter()

    jacoco {
        toolVersion = '0.7.2.201409121644'
    }
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'idea'

    group = 'me.masahito'
    archivesBaseName = "bloomfilter"
    version = "0.1.0"
    sourceCompatibility = targetCompatibility = '1.8'

    configurations {
        provided
    }

    sourceSets {
        main {
            compileClasspath += configurations.provided
        }
        test {
            compileClasspath += configurations.provided
            runtimeClasspath += configurations.provided
        }
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    dependencies {
        provided "org.projectlombok:lombok:1.14.8"
        testCompile 'junit:junit:4.12'
    }
}

project("bloomfilter-example") {
    dependencies {
        compile project(":bloomfilter-core")
    }
}

configure([project("bloomfilter-core")]) {
    jar.manifest {
        attributes(
                'Implementation-Title' : name,
                'Implementation-Version': version,
                'Implementation-Vendor': 'me.masahito',
                'Built-JDK': "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
                'Built-Gradle': gradle.gradleVersion
        )
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }
    artifacts {
        archives javadocJar, sourcesJar
    }
    apply plugin: 'maven'
    apply plugin: 'signing'

    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'BloomFilter'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'Bloom Filter Implementation'
                    url 'https://github.com/masahitojp/java-bloomfilter'

                    scm {
                        url 'https://github.com/masahitojp/java-bloomfilter'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id 'masahito'
                            name "Nakamura Masato"
                            email "randomstep@gmail.com"
                        }
                    }
                }
            }
        }
    }

}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}